 - a lot of the magic comes down to 'merging' two graphs, for example, two graphs from different docs

* Merging
** Nodes
 - attributes of a node are merged according to a few strategies, for example we could concat them, maybe merging attributes that have a high cosine similarity or something
 - attributes in the Microsoft implementation are just the explicitly defined properties of nodes and edges
 - an attribute could be numeric!  This is more technical in how to merge...

** Edges
 - connections created for every edge
 - weights can be summed / averaged - this relates to the above points about merging attributes
   I believe the most sensible choice here is SUM - the rest of the community detection processing will rely on this!

* Communities
 - Leiden algorithm gives us definitions of 'communities' over the graph - TODO: see what this looks like in practice
 - Seems like there will be multiple resolutions of community?

** Community summaries
 - For a given community, basically, shove as much information as possible into a (single?) LLM summarization call
   - Add a 'source node, target node, edge description' at a time into these summarization calls
   - Prioritize what goes in by descending edge weight
   - I believe the idea is that there will be many such 'leaf communities', so these summaries will be good approximations of the whole leaf community
 - Move up the chain of communities, summarizing as you go.

* High level question answering
 - Basically looks like we ask the question to a number of communities, determine which of these answers are actually helpful, then take use these 'sub-answers' in a context to answer the original question
